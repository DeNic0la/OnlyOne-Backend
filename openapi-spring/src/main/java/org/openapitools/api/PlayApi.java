/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.openapitools.model.Card;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-03T14:54:09.481151016+01:00[Europe/Zurich]")
@Validated
@Tag(name = "play", description = "Playing the game and getting Information about own Cards")
@RequestMapping("${openapi.onlyOne.base-path:}")
public interface PlayApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /play/{id} : View all your Cards
     *
     * @param id  (required)
     * @param xUser  (optional)
     * @return Showing cards (status code 200)
     */
    @Operation(
        operationId = "playIdGet",
        summary = "View all your Cards",
        tags = { "play" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Showing cards", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Card.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/play/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Card>> playIdGet(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id,
        @Parameter(name = "x-user", description = "") @RequestHeader(value = "x-user", required = false) String xUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 4, \"color\" : \"blue\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /play/{id}/new : Pull a Card from the Stack
     *
     * @param id  (required)
     * @param xUser  (optional)
     * @return sucessfully pulled a card (status code 200)
     *         or not your turn error (status code 400)
     */
    @Operation(
        operationId = "playIdNewGet",
        summary = "Pull a Card from the Stack",
        tags = { "play" },
        responses = {
            @ApiResponse(responseCode = "200", description = "sucessfully pulled a card", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Card.class))
            }),
                @ApiResponse(responseCode = "400", description = "not your turn error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/play/{id}/new",
        produces = { "application/json" }
    )
    default ResponseEntity<Card> playIdNewGet(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id,
        @Parameter(name = "x-user", description = "") @RequestHeader(value = "x-user", required = false) String xUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 4, \"color\" : \"blue\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /play/{id} : Play a card
     *
     * @param id  (required)
     * @param xUser  (optional)
     * @param card Card to Play (optional)
     * @return Card was Played (status code 200)
     *         or not your turn error (status code 400)
     *         or you dont have such a card error (status code 404)
     */
    @Operation(
        operationId = "playIdPost",
        summary = "Play a card",
        tags = { "play" },
        responses = {
                @ApiResponse(responseCode = "200", description = "Card was Played"),
                @ApiResponse(responseCode = "400", description = "not your turn error"),
                @ApiResponse(responseCode = "404", description = "you dont have such a card error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/play/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> playIdPost(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id,
        @Parameter(name = "x-user", description = "") @RequestHeader(value = "x-user", required = false) String xUser,
        @Parameter(name = "Card", description = "Card to Play") @Valid @RequestBody(required = false) Card card
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
